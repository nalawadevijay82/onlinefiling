	<file name="catalog/model/checkout/order.php">
		<operation>
			<!--function is called to calculate AvaTax amount and logging snippet is added-->
			<search position="before" ><![CDATA[$this->cache->delete('product');]]></search>
				<add><![CDATA[
				$avatax_tax_country = "";
				if(trim($this->config->get('config_avatax_validate_address_in'))=="both")
				{
					$avatax_tax_country = "|US|CA|";
				}
				else
				{
					$avatax_tax_country = "|".$this->config->get('config_avatax_validate_address_in')."|";
				}
				$avatax_tax_country_pos = strpos($avatax_tax_country, "|".$order_info["shipping_iso_code_2"]."|");

				//if($this->config->get('config_avatax_tax_calculation') && ($avatax_tax_country_pos !== false))
				if($this->config->get('config_avatax_tax_calculation'))
				{
					$time_start = round(microtime(true) * 1000);
					//Call 2 Methods
					//1. GetTax with OrderType = SalesInvoice
					$products = $this->cart->getProducts();

					//added for paypal checkout
					if($order_status_id!=0)
					{
						$order_info["order_status_id"]=$order_status_id;
					}

					$checkEmpty = array_filter($products);
					if (!empty($checkEmpty))
					{
						require_once(DIR_SYSTEM . 'AvaTax4PHP/classes/SystemLogger.class.php');
						$GetTaxReturnValue = $this->AvaTaxGetTaxOrder($order_info, $products);

						//3. Get the Document Id from PostTax Return Value and update it in the Order Table
						//Commented below line as on 3rd Dec 2014 as mysql_query will not be executed in below line.
						//$query_avatax = mysql_query("SELECT avatax_paytax_document_id FROM `" . DB_PREFIX . "order`");

						$result = $this->db->query("SHOW COLUMNS FROM `" . DB_PREFIX . "order` LIKE 'avatax_paytax_document_id'");
						if($result->num_rows == 0){
							$this->db->query("ALTER TABLE `" . DB_PREFIX . "order` ADD `avatax_paytax_document_id` INT NOT NULL DEFAULT '0', ADD `avatax_paytax_transaction_id` INT NOT NULL DEFAULT '0', ADD `avatax_paytax_document_code` VARCHAR( 40 ) NOT NULL, ADD `avatax_paytax_error_message` TEXT NOT NULL");
						}

						//2. PostTax with GUID
						//5. Completed, 15. Processed, 3. Shipped

						if(is_array($GetTaxReturnValue))
						{
							$this->updateOrderForAvaTaxFields(0, 0, $GetTaxReturnValue["GetTaxDocCode"], "Success", $order_id);

							/************* Logging code snippet (optional) starts here *******************/
							// System Logger starts here:

							$log_mode = $this->config->get('config_avatax_log');
							if($log_mode==1)
							{
								$timeStamp 			= 	new DateTime();						// Create Time Stamp
								$params				=   '[Input: ' . ']';		// Create Param List
								$u_name				=	'';							// Eventually will come from $_SESSION[] object

								// Creating the System Logger Object
								$application_log 	= 	new SystemLogger;
								$connectortime = round(microtime(true) * 1000)-$time_start;
								$latency = $this->session->data['latency'];
								$connectortime= $connectortime- $latency;

								$application_log->metric('GetTax '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);

								$latency =""  ;
								$this->session->data['latency'] ="";
								$this->session->data['getTaxLines'] ="";
								$this->session->data['getDocType'] ="";
								$this->session->data['getDocCode'] ="";

								//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
								// 	System Logger ends here
								//	Logging code snippet (optional) ends here
							}
						}
							else
							{
								if(strpos($GetTaxReturnValue,"urisdictionNotFoundError:"))
								{
									$this->updateOrderForAvaTaxFields(0, 0, 0, $GetTaxReturnValue, $order_id);
								}
							}
						//}
					}
				}
				]]></add>
		</operation>
	</file>

		<file name="catalog/model/checkout/order.php">
		<operation>
			<!--Address and product details are fetched and function is defined to calculate AvaTax amount and to update the AvaTax fields-->
			<search position="before" ><![CDATA[public function addOrderHistory($order_id, $order_status_id, $comment = '', $notify = false) {]]></search>
				<add><![CDATA[

				/***************************************************************************
				*   Last Updated On	  :	 05/14/2015			                               *
				*   Description       :  This function updates the AvaTax fields in order  *
				***************************************************************************/

				public function updateOrderForAvaTaxFields($avatax_document_id, $avatax_transaction_id, $avatax_document_code, $avatax_error_message, $order_id) {
					$this->db->query("UPDATE `" . DB_PREFIX . "order` SET avatax_paytax_document_id = '" . (int)$avatax_document_id . "', avatax_paytax_transaction_id = '" . (int)$avatax_transaction_id . "', avatax_paytax_document_code = '" . (int)$avatax_document_code . "', avatax_paytax_error_message = '".$this->db->escape($avatax_error_message)."' WHERE order_id = '" . (int)$order_id . "'");
				}

				public function getCountry($country_id) {
					$query = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "country WHERE country_id = '" . (int)$country_id . "'");

					return $query->row;
				}

				public function getZone($zone_id) {
					$query = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "zone WHERE zone_id = '" . (int)$zone_id . "'");

					return $query->row;
				}

				public function getCategories($product_id) {
					$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_to_category pc LEFT JOIN " . DB_PREFIX . "category_description cd ON (pc.category_id = cd.category_id) WHERE pc.product_id = '" . (int)$product_id . "'");

					$product_categories = "";
					foreach($query->rows as $row)
					{
						$product_categories .= $row["name"].", ";
					}
					//$product_categories = substr($product_categories, 0, (strlen($product_categories) - 2));
					//$product_categories = substr($product_categories, 0, 24);
					return $product_categories;
				}


				 /***************************************************************************
				 *   Last Updated On	:	05/14/2015			                            *
				 *   Description        :   This function returns the original price of		*
				 *							product by product ID							*
				 ***************************************************************************/

				 //Removed older getProductOriginalPrice function. Replaced with admin function
					public function getProductOriginalPrice($product_id) {
					$product_price_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product WHERE product_id = '" . (int)$product_id . "'");
					if($product_price_query->row["tax_class_id"] > 0)
					{
						$Taxcodetitle = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class WHERE tax_class_id = '" . (int)$product_price_query->row["tax_class_id"] . "'");
						$taxcode = $Taxcodetitle->row['title'];
					}
					else
					{
						$taxcode = '';
					}
					if ($product_price_query->num_rows) {
						//$price = $product_price_query->row['price'];
						$Product_price_taxcode = array(
											'product_price'                => $product_price_query->row['price'],
											'tax_class_title'              => $taxcode,
									   );
					}
					return $Product_price_taxcode;
				}


				/****************************************************************************
				*   Last Updated On		:	05/14/2015			                           	*
				*   Description			:  	This function serves as the wrapper function	*
				*   						for AvaTax GetTax() Call						*
				***************************************************************************/

				public function AvaTaxGetTaxOrder($order_info, $products) {

					include_once(DIR_SYSTEM . 'AvaTax4PHP/AvaTax.php');

					global $registry;
					$this->cart = $registry->get('cart');

					$environment = 'Development';

					$service_url = $this->config->get('config_avatax_service_url');
					$account = $this->config->get('config_avatax_account');
					$license = $this->config->get('config_avatax_license_key');
					$client = $this->config->get('config_avatax_client');

					if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
						$environment = "Development";
					else
						$environment = "Production";

					new ATConfig($environment, array('url'=>$service_url, 'account'=>$account,'license'=>$license, 'client'=>$client, 'trace'=> TRUE));

					//Variable Mapping
					if ($this->customer->isLogged()) {
						$customer_address = $this->customer->getAddress($this->customer->getAddressId());
						$CustomerCode = $customer_address["customer_id"];
					} else {
						$customer_group_id = $this->config->get('config_customer_group_id');

						//$CustomerCode = $this->config->get('config_account_id');
						$CustomerCode = $this->config->get('config_customer_group_id');
					}

					$country_details = $this->getCountry($this->config->get('config_country_id'));
					$zone_details = $this->getZone($this->config->get('config_zone_id'));

					$OrigAddress = $this->config->get('config_address');
					$OrigCity = $this->config->get('config_city');
					$OrigRegion = $zone_details["code"];
					$OrigPostalCode = $this->config->get('config_postal_code');
					$OrigCountry = $country_details["iso_code_2"];

					if(!empty($order_info["shipping_address_1"]))
					{
						$DestAddress = $order_info["shipping_address_1"];
						$DestCity = $order_info["shipping_city"];
						$DestRegion = $order_info["shipping_zone_code"];
						$DestPostalCode = $order_info["shipping_postcode"];
						$DestCountry = $order_info["shipping_iso_code_2"];
					}
					else
					{
						$DestAddress = $order_info["payment_address_1"];
						$DestCity = $order_info["payment_city"];
						$DestRegion = $order_info["payment_zone_code"];
						$DestPostalCode = $order_info["payment_postcode"];
						$DestCountry = $order_info["payment_iso_code_2"];
					}

					$CompanyCode = $this->config->get('config_avatax_company_code');
					$DocType = $this->config->get('config_avatax_transaction_calculation');
					if($DocType == 1){
						$DocType = "SalesInvoice";
					}else{
						$DocType = "SalesOrder";
					}
					$DocCode = $order_info['order_id'];
					$SalesPersonCode = "";
					$EntityUseCode = "";
					$Discount = 0;
					$PurchaseOrderNo = '';
					$ExemptionNo = "";
					$LocationCode = '';
					$LineNo = 1;

					$client = new TaxServiceSoap($environment);
					$request = new GetTaxRequest();
					$dateTime = new DateTime();
					//$request->setDocDate($DocDate);
					$request->setCompanyCode($CompanyCode);
					$request->setDocType($DocType);
					$request->setDocCode($DocCode);
					$request->setDocDate(date_format($dateTime, "Y-m-d"));
					$request->setSalespersonCode($SalesPersonCode);
					$request->setCustomerCode($CustomerCode);
					$request->setCustomerUsageType($EntityUseCode);
					$request->setPurchaseOrderNo($PurchaseOrderNo);
					$request->setExemptionNo($ExemptionNo);
					$request->setDetailLevel(DetailLevel::$Tax);
					$request->setLocationCode($LocationCode);
					//$request->setCommit(FALSE);

					//Added for paypal status on 20 Apr 2015
					if(isset($order_info["order_status_id"]) && $order_info["order_status_id"]==5 )
						$request->setCommit(TRUE);
					else
						$request->setCommit(FALSE);

					//Add Origin Address
					$origin = new Address();
					$origin->setAddressCode(0);
					$origin->setLine1($OrigAddress);
					$origin->setLine2("");
					$origin->setCity($OrigCity);
					$origin->setRegion($OrigRegion);
					$origin->setPostalCode($OrigPostalCode);
					$origin->setCountry($OrigCountry);
					$request->setOriginAddress($origin);

					// Add Destination Address
					$destination = new Address();
					$destination->setAddressCode(1);
					$destination->setLine1($DestAddress);
					$destination->setLine2("");
					$destination->setCity($DestCity);
					$destination->setRegion($DestRegion);
					$destination->setPostalCode($DestPostalCode);
					$destination->setCountry($DestCountry);
					$request->setDestinationAddress($destination);

					// Line level processing
					$Ref1 = '';
					$Ref2 = '';
					$ExemptionNo = '';
					$RevAcct = '';
					$EntityUseCode = '';

					$lines = array();
					$product_total = 0;
					$i = 0;
					$ordertotal = 0 ;
					$status = false;

					$avatax_discount_amount = 0;
					$TaxCode = 0;

					$lineCount = count($products);
					foreach ($products as $product) {

						$total_amount = $product["total"];

						$Description = $this->getCategories($product["product_id"]);
						//$TaxCode = substr($product["name"], 0, 24);
						if(isset($product["tax_class_id"]) && $product["tax_class_id"] > 0)
						{
							if($product["tax_class_title"] == 'Non Taxable')
							{
								$TaxCode = 'NT';	//Used to post product on amdin console.
							}
							else
							{
								$TaxCode = $product["tax_class_title"];
							}
						}
						else
						{
							$TaxCode = '';
						}

						//Product Discount
						$this->load->model('catalog/product');
						//$product_discount = $this->model_catalog_product->getProductDiscounts($product["product_id"]);
						$product_discount = $this->model_catalog_product->getProductDiscountsForGivenRange($product["product_id"], $product["quantity"], date_format($dateTime, "Y-m-d"));

						$discount_count = 0;
						$discount_amount = 0;
						foreach($product_discount as $discount) {
							$discount_amount += $discount["price"];
							$discount_count++;
						}

						$line1 = new Line();
						//$line1->setNo($i+1);//$product["product_id"]
						$line1->setNo($product["product_id"]);

						//UPC Code Added by Vijay as on 3rd Dec 2014. If enabled, UPC code will be passed instead of Model number
						//Changed by Vijay on 26 Dec 2014. Added 50 Characters limitation for Model number & SKU, as CALC service doesn't accept more than 50 characters Item Code.
						if(($this->config->get('config_avatax_product_code')=='UPC') && trim($product["upc"])<>"")
						{
							$line1->setItemCode("UPC:".$product["upc"]);
						}
						elseif(($this->config->get('config_avatax_product_code')=='SKU') && trim($product["sku"])<>"")
						{
							$line1->setItemCode(substr($product["sku"],0,50));
						}
						else
						{
							$line1->setItemCode(substr($product["model"],0,50));
						}

						$line1->setDescription($Description);
						$line1->setTaxCode($TaxCode);
						$line1->setQty($product["quantity"]);
						//$line1->setAmount($product["price"]);
						//$line1->setAmount($product["total"]);
						$line1->setAmount($total_amount);
						//if($discount_count>0) $line1->setDiscounted(true);
						//else $line1->setDiscounted(false);

						//Added by Tushar coupon_info
						//Added to handle coupon scenario regarding multiple products or order
						if(isset($this->session->data['coupon_amount']) && !empty($this->session->data['coupon_amount']))
						{
							if(isset($this->session->data['coupon_info']) && !empty($this->session->data['coupon_info']))
							{
								$coupon_info = $this->session->data['coupon_info'];
							}
							else
							{
								$coupon_info = array('product'=>'');
							}
							if (!$coupon_info['product'] && empty($coupon_info['product'])) {
								$status = true;
							}
							else {
								if (in_array($product['product_id'], $coupon_info['product'])) {
									$status = true;
								} else {
									$status = false;
								}
							}
						}
						else
						{
							$status = false;
						}
						$line1->setDiscounted($status);

						$line1->setRevAcct($RevAcct);
						$line1->setRef1($Ref1);
						$line1->setRef2($Ref2);
						$line1->setExemptionNo($ExemptionNo);
						$line1->setCustomerUsageType($EntityUseCode);
						$line1->setOriginAddress($origin);
						$line1->setDestinationAddress($destination);

						$lines[$i] = $line1;
						$i++;
						$ordertotal += $total_amount;
						if($discount_count>0) $avatax_discount_amount += (($product_original_amount - $discount_amount) * $product["quantity"]);
						$product_total += $product['quantity'];
					}

					//Shipping Line Item
					// Order Totals
					$order_total_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_total` WHERE order_id = '" . (int)$order_info['order_id'] . "' ORDER BY sort_order ASC");

					$shipping_count = 0;

					foreach ($order_total_query->rows as $order_total) {
						if($order_total['code']=="coupon") {
							$Discount = abs($order_total['value']);
						}
					}

					foreach ($order_total_query->rows as $order_total) {
						if($order_total['code']=="shipping") {
							if(isset($this->session->data['shipping_method']))
							{
								$shipping_method = $this->session->data['shipping_method'];
								if(isset($shipping_method["tax_class_id"]))
								{
									if($shipping_method["tax_class_id"] > 0){
										$TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $shipping_method["tax_class_id"] . "'");
										if($TaxClasses->row['title'] == 'Non Taxable')
										{
											$TaxCode = 'NT';
										}
										else
										{
											$TaxCode = $TaxClasses->row['title'];
										}
									}
									else{
									   // $TaxCode = 'FR';
									   $TaxCode = '';
									}
								}
							}
							//$TaxCode = $product["tax_class_id"];
							$line1 = new Line();
							$line1->setNo($i+1);
							$line1->setItemCode($order_total['code']);
							$line1->setDescription($order_total['title']);
							$line1->setTaxCode($TaxCode);
							$line1->setQty(1);

							//If Coupon is applied & free shipping is enabled, we'll pass 0 to free shipping -
							$cost = $order_total['value'];
							if(isset($this->session->data['coupon_info']) && !empty($this->session->data['coupon_info']))
							{
								$coupon_info = $this->session->data['coupon_info'];
								if($coupon_info['shipping'])
								{
									$Discount = $Discount - $cost;
									$cost = 0;
								}
							}
							$line1->setAmount($cost);

							$status = false;
							$line1->setDiscounted($status);

							$line1->setRevAcct($RevAcct);
							$line1->setRef1($Ref1);
							$line1->setRef2($Ref2);
							$line1->setExemptionNo($ExemptionNo);
							$line1->setCustomerUsageType($EntityUseCode);
							$line1->setOriginAddress($origin);
							$line1->setDestinationAddress($destination);

							$lines[$i] = $line1;
							$i++;
							$shipping_count++;
						}
						if($order_total['code']=="handling") {
							$hadling_total = $this->config->get('handling_total');
							$hadling_tax_class_id = $this->config->get('handling_tax_class_id');
							$hadling_fee = $this->config->get('handling_fee');

							//Added Handling Status in if condition by Vijay Nalawade on 13 Jan 2015. To check if Handling Fee status is enabled or not
							$handling_status = $this->config->get('handling_status');

							if($handling_status==1)
							{
								if($ordertotal <= $hadling_total)
								{
									if($hadling_tax_class_id > 0){
										$TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $hadling_tax_class_id . "'");
										if($TaxClasses->row['title'] == 'Non Taxable')
										{
											$TaxCode = 'NT';
										}
										else
										{
											$TaxCode = $TaxClasses->row['title'];
										}
									}
									else{
										//$TaxCode = 'HNLD';
										$TaxCode = '';
									}
								}
							}
							//$TaxCode = $product["tax_class_id"];
							$line1 = new Line();
							$line1->setNo($i+1);
							$line1->setItemCode($order_total['code']);
							$line1->setDescription($order_total['title']);
							//$line1->setTaxCode($TaxCode);
							$line1->setQty(1);
							$line1->setAmount($order_total['value']);

							$status = false;
							$line1->setDiscounted($status);

							$line1->setRevAcct($RevAcct);
							$line1->setRef1($Ref1);
							$line1->setRef2($Ref2);
							$line1->setExemptionNo($ExemptionNo);
							$line1->setCustomerUsageType($EntityUseCode);
							$line1->setOriginAddress($origin);
							$line1->setDestinationAddress($destination);

							$lines[$i] = $line1;
							$i++;
						}
					}

					//$request->setLines(array($lines));
					$request->setLines($lines);
					$request->setDiscount($Discount);

					$GetTaxData = array();
					$returnMessage = "";
					try {
						if (!empty($DestAddress)) {
							//$connectortime = round(microtime(true) * 1000)-$time_start;
							$latency = round(microtime(true) * 1000);
							$getTaxResult = $client->getTax($request);
							$latency = round(microtime(true) * 1000)-$latency;
							$this->session->data['latency'] = "" ;
							$this->session->data['getTaxLines'] = "" ;
							$this->session->data['getDocType'] = "" ;
							$this->session->data['getDocCode'] = "" ;
							$this->session->data['latency'] = $latency ;
							$this->session->data['getTaxLines'] = $getTaxResult->getTaxLines() ;
							$this->session->data['getDocType'] = $getTaxResult->getDocType() ;
							$this->session->data['getDocCode'] = $getTaxResult->getDocCode();

							//Added for connector metrics
							/************* Logging code snippet (optional) starts here *******************/
							// System Logger starts here:

							$log_mode = $this->config->get('config_avatax_log');

							if($log_mode==1){
								$timeStamp 			= 	new DateTime();						// Create Time Stamp
								$params				=   '[Input: ' . ']';		// Create Param List
								$u_name				=	'';							// Eventually will come from $_SESSION[] object

								// Creating the System Logger Object
								$application_log 	= 	new SystemLogger;

								$application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastRequest());		// Create System Log
								$application_log->WriteSystemLogToFile();			// Log info goes to log file

								$application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastResponse());		// Create System Log
								$application_log->WriteSystemLogToFile();			// Log info goes to log file

								//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
								// 	System Logger ends here
								//	Logging code snippet (optional) ends here
							}

							// Error Trapping
							if ($getTaxResult->getResultCode() == SeverityLevel::$Success) {
								$GetTaxData['GetTaxDocCode'] = $getTaxResult->getDocCode();
								$GetTaxData['GetTaxDocDate'] = $getTaxResult->getDocDate();
								$GetTaxData['GetTaxTotalAmount'] = $getTaxResult->getTotalAmount();
								$GetTaxData['GetTaxTotalTax'] = $getTaxResult->getTotalTax();

								return $GetTaxData;
							} else {
								foreach ($getTaxResult->getMessages() as $msg) {
									//echo $msg->getName() . ": " . $msg->getSummary() . "\n";
									$returnMessage .= $msg->getName() . ": " . $msg->getSummary() . "\n";
								}
								return $returnMessage;
							}
						}
					} catch (SoapFault $exception) {
						$msg = "Exception: ";
						if ($exception)
							$msg .= $exception->faultstring;

							// If you desire to retrieve SOAP IN / OUT XML
							//  - Follow directions below
							//  - if not, leave as is

							//echo $msg . "\n";
							return $msg;
							//    }   //UN-comment this line to return SOAP XML
					}   //Comment this line to return SOAP XML
				}

				/****************************************************************************
				*   Last Updated On		:	05/14/2015			                           	*
				*   Description			:  	This function serves as the wrapper function	*
				*   						for AvaTax PostTax() Call						*
				****************************************************************************/

				public function AvaTaxPostTax($GetTaxReturnValue) {
					$environment = 'Development';
					if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
						$environment = "Development";
					else
						$environment = "Production";

					$order_data = array();
					$dateTime = new DateTime();
					$order_data["service_url"] = $this->config->get('config_avatax_service_url');
					$order_data["account"] = $this->config->get('config_avatax_account');
					$order_data["license"] = $this->config->get('config_avatax_license_key');
					$order_data["client"] = $this->config->get('config_avatax_client');
					$order_data["environment"] = $environment;
					$order_data["CompanyCode"] = $this->config->get('config_avatax_company_code');
					$order_data["DocType"] = "SalesInvoice";

					$order_data["DocCode"] = $GetTaxReturnValue['GetTaxDocCode'];
					$order_data["DocDate"] = $GetTaxReturnValue['GetTaxDocDate'];

					$order_data["TotalAmount"] = $GetTaxReturnValue['GetTaxTotalAmount'];
					$order_data["TotalTax"] = $GetTaxReturnValue['GetTaxTotalTax'];
					$order_data["Commit"] = 1;

					include_once(DIR_SYSTEM . 'AvaTax4PHP/post_tax.php');
					$return_message = PostTax($order_data);
					return $return_message;
				}
			]]></add>
			</operation>
	</file>

	<file name="catalog/model/checkout/order.php"><!--file modified from admin/model/sale/order.php to catalog/model/checkout/order.php-->
		<operation>
			<!--AvaTaxChangeDocumentStatus function is called to change Order State-->
			<search position="after" ><![CDATA[public function addOrderHistory($order_id, $order_status_id, $comment = '', $notify = false) {]]></search>
			<add><![CDATA[
			if($this->config->get('config_avatax_tax_calculation')&& $this->config->get('config_avatax_transaction_calculation'))
			{
				$order_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order` WHERE order_status_id > '0' AND order_id = '" . (int)$order_id . "'");

				//Added Left join by Vijay on 11 Dec 2014 to fetch UPC & SKU details
				if ($order_query->num_rows) {
					$product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product LEFT JOIN " . DB_PREFIX . "product ON(" . DB_PREFIX . "order_product.product_id=" . DB_PREFIX . "product.product_id)   WHERE order_id = '" . (int)$order_id . "'");

					//$existing_product_list = $product_query->rows;
					//$new_product_list = $data['order_product'];
					$new_product_list = $product_query->rows;
				}
				$data['order_status_id'] = $order_status_id;

				if(isset($new_product_list))
				{
					$this->AvaTaxChangeDocumentStatus($order_query, $data, $new_product_list);
				}
			}
			else{
				$this->session->data['previous_error_status'] = "Success";
			}
			]]></add>
		</operation>
		<operation>
			<!--DocumentStateVoided, DocumentStateUncommitted, DocumentStateCommitted functions are defined to change the state to void, uncommitted and committed-->
			<search position="before" ><![CDATA[public function deleteOrder($order_id) {]]></search>
			<add><![CDATA[

			/***************************************************************************
			*   Last Updated On	   :   05/14/2015			                           *
			*   Description        :   This function fetches document Status		   *
			***************************************************************************/

			public function getAvaTaxDocumentStatus() {

				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_status");

				$avatax_document_status = array();
				foreach($query->rows as $row)
				{
					$avatax_document_status[$row["order_status_id"]] = $row["avatax_document_status"];
				}
				return $avatax_document_status;
			}


			/***************************************************************************
			*   Last Updated On	   :   05/14/2015			                           *
			*   Description        :   This function sets Document State = void	       *
			***************************************************************************/

			public function DocumentStateVoided($order_query, $new_product_list)
			{
				$time_start = round(microtime(true) * 1000);

				//$AvaTaxDocumentStatus = array(1=>"Uncommitted", 2=>"Uncommitted", 3=>"Committed", 5=>"Committed", 7=>"Voided", 8=>"Voided", 9=>"Voided", 10=>"Voided", 11=>"Voided", 12=>"Voided", 13=>"Voided", 14=>"Voided", 15=>"Committed", 16=>"Voided");
				$AvaTaxDocumentStatus = $this->getAvaTaxDocumentStatus();

				if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Committed")
				{
					$connectortime = round(microtime(true) * 1000)-$time_start;
					//1. Call CancelTax with CancelCode = DocVoided
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");

					$time_start = round(microtime(true) * 1000);
					$time_start = $time_start + $connectortime;
					//2. Call GetTax with Commit = False
					$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);

					$connectortime = round(microtime(true) * 1000)-$time_start;
					//3. Call CancelTax with CancelCode = DocVoided
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");

				}
				else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Voided")
				{
					$connectortime = round(microtime(true) * 1000)-$time_start;
					//1. Call CancelTax with CancelCode = DocDeleted
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");

					$time_start = round(microtime(true) * 1000);
					$time_start = $time_start + $connectortime;
					//2. Call GetTax with Commit = False
					$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);

					$connectortime = round(microtime(true) * 1000)-$time_start;
					//3. Call CancelTax with CancelCode = DocVoided
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");

				}
				else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Uncommitted")
				{
					$connectortime = round(microtime(true) * 1000)-$time_start;
					//1. Call CancelTax with CancelCode = DocVoided
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");

					$time_start = round(microtime(true) * 1000);
					$time_start = $time_start + $connectortime;
					//2. Call GetTax with Commit = False
					$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);

					$connectortime = round(microtime(true) * 1000)-$time_start;
					//3. Call CancelTax with CancelCode = DocVoided
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");

				}
				 if(is_array($DocCommittedReturn))
				{
					/************* Logging code snippet (optional) starts here *******************/
					// System Logger starts here:
					$log_mode = $this->config->get('config_avatax_log');

					if($log_mode==1){
						$timeStamp 			= 	new DateTime();						// Create Time Stamp
						$params				=   '[Input: ' . ']';		// Create Param List
						$u_name				=	'';							// Eventually will come from $_SESSION[] object

						// Creating the System Logger Object
						$application_log 	= 	new SystemLogger;
						//$connectortime = round(microtime(true) * 1000)-$time_start;
						$latency = $this->session->data['latency'];
						$connectortime = $connectortime - $latency;

						$application_log->metric('GetTax '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);

						$latency =""  ;
						$this->session->data['latency'] ="";
						$this->session->data['getTaxLines'] ="";
						$this->session->data['getDocType'] ="";
						$this->session->data['getDocCode'] ="";

						//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
						// 	System Logger ends here
						//	Logging code snippet (optional) ends here
					}
				}
			}

			/***************************************************************************
			*   Last Updated On	   :   05/14/2015			                            *
			*   Description        :   This function changes 							*
			*						   Document State = Uncommitted	    			    *
			****************************************************************************/

			public function DocumentStateUncommitted($order_query, $new_product_list){
				$time_start = round(microtime(true) * 1000);
				$AvaTaxDocumentStatus = $this->getAvaTaxDocumentStatus();

				if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Committed")
				{
					$connectortime = round(microtime(true) * 1000)-$time_start;
					//1. Call CancelTax with CancelCode = Voided
					$DocVoidedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
					//2. Call CancelTax with CancelCode = DocDeleted
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");

					$time_start = round(microtime(true) * 1000);
					$time_start = $time_start + $connectortime;
					//3. Call GetTax with Commit = False
					$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);
				}
				else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Voided")
				{
					$connectortime = round(microtime(true) * 1000)-$time_start;
					//1. Call CancelTax with CancelCode = DocDeleted
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");

					$time_start = round(microtime(true) * 1000);
					$time_start = $time_start + $connectortime;
					//2. Call GetTax with Commit = False
					$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);
				}
				else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Uncommitted")
				{
					//1. Call GetTax with Commit = False
					$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);
				}
				 if(is_array($DocCommittedReturn))
				{
					$this->updateOrderForAvaTaxFields(0, 0, $DocCommittedReturn["GetTaxDocCode"], "Success", $order_query->row['order_id']);

					/************* Logging code snippet (optional) starts here *******************/
					// System Logger starts here:
					$log_mode = $this->config->get('config_avatax_log');

					if($log_mode==1){
						$timeStamp 			= 	new DateTime();						// Create Time Stamp
						$params				=   '[Input: ' . ']';		// Create Param List
						$u_name				=	'';							// Eventually will come from $_SESSION[] object

						// Creating the System Logger Object
						$application_log 	= 	new SystemLogger;
						$connectortime = round(microtime(true) * 1000)-$time_start;
						$latency = $this->session->data['latency'];
						$connectortime = $connectortime - $latency;

						$application_log->metric('GetTax '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);

						$latency =""  ;
						$this->session->data['latency'] ="";
						$this->session->data['getTaxLines'] ="";
						$this->session->data['getDocType'] ="";
						$this->session->data['getDocCode'] ="";

						//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
						// 	System Logger ends here
						//	Logging code snippet (optional) ends here
					}
				}
				else
				{
					$this->updateOrderForAvaTaxFields(0, 0, 0, $DocCommittedReturn, $order_query->row['order_id']);
				}
			}

			/****************************************************************************
			*   Last Updated On		:	05/14/2015			                           	*
			*   Description        	:   This function changes 							*
			*							Document State = Committed	    				*
			****************************************************************************/

			public function DocumentStateCommitted($order_query, $new_product_list){
				$time_start = round(microtime(true) * 1000);
				$AvaTaxDocumentStatus = $this->getAvaTaxDocumentStatus();

				if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Committed")
				{
					$connectortime = round(microtime(true) * 1000)-$time_start;
					//1. Call CancelTax with CancelCode = Voided
					$DocVoidedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
					//2. Call CancelTax with CancelCode = DocDeleted
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");
					//3. Call GetTax with Commit = False

					$time_start = round(microtime(true) * 1000);
					$time_start = $time_start + $connectortime;
					$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 1);
				}
				else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Voided")
				{
					$connectortime = round(microtime(true) * 1000)-$time_start;
					//1. Call CancelTax with CancelCode = DocDeleted
					$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");

					$time_start = round(microtime(true) * 1000);
					$time_start = $time_start + $connectortime;
					//2. Call GetTax with Commit = False
					$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 1);
				}
				else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Uncommitted")
				{
					//1. Call GetTax with Commit = True
					$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 1);
				}
				 if(is_array($DocCommittedReturn))
				{
					$this->updateOrderForAvaTaxFields(0, 0, $DocCommittedReturn["GetTaxDocCode"], "Success", $order_query->row['order_id']);

					/************* Logging code snippet (optional) starts here *******************/
					// System Logger starts here:
					$log_mode = $this->config->get('config_avatax_log');

					if($log_mode==1){
						$timeStamp 			= 	new DateTime();						// Create Time Stamp
						$params				=   '[Input: ' . ']';		// Create Param List
						$u_name				=	'';							// Eventually will come from $_SESSION[] object

						// Creating the System Logger Object
						$application_log 	= 	new SystemLogger;
						$connectortime = round(microtime(true) * 1000)-$time_start;
						$latency = $this->session->data['latency'];
						$connectortime = $connectortime - $latency;

						$application_log->metric('GetTax '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);

						$latency =""  ;
						$this->session->data['latency'] ="";
						$this->session->data['getTaxLines'] ="";
						$this->session->data['getDocType'] ="";
						$this->session->data['getDocCode'] ="";

						//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
						// 	System Logger ends here
						//	Logging code snippet (optional) ends here
					}
				}
				else
				{
					$this->updateOrderForAvaTaxFields(0, 0, 0, $DocCommittedReturn, $order_query->row['order_id']);
				}
			}

			/***************************************************************************************************
			*   Last Updated On		:	05/14/2015			                           							*
			*   Description			:  	This function changes Document State to the desired state as per the	*
			*                           passed second parameter													*
			*****************************************************************************************************/

			public function AvaTaxChangeDocumentStatus($order_query, $data, $new_product_list) {
				if($this->config->get('config_avatax_transaction_calculation')) {
					Switch($data["order_status_id"]) {
					case 0:
						break;
					case 1://Pending
						$this->DocumentStateUncommitted($order_query, $new_product_list);
						break;
					case 2://Processing
						$this->DocumentStateUncommitted($order_query, $new_product_list);
						break;
					case 3://Shipped
						$this->DocumentStateCommitted($order_query, $new_product_list);
						break;
					case 5://Complete
						$this->DocumentStateCommitted($order_query, $new_product_list);
						break;
					case 7://Cancelled
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 8://Denied
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 9://Canceled Reversal
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 10://Failed
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 11://Refunded
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 12://Reversed
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 13://Chargeback
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 14://Expired
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 15://Processed
						$this->DocumentStateCommitted($order_query, $new_product_list);
						break;
					case 16://Voided
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					default://Default
						$this->DocumentStateCommitted($order_query, $new_product_list);
						break;
					}
				}
				else{
					$this->session->data['previous_error_status'] = "Success";
				}
			}

			/****************************************************************************
			*   Last Updated On		:	05/14/2015			                           	*
			*   Description			:  	This function serves as the wrapper function	*
			*   						for AvaTax GetTax() Call						*
			****************************************************************************/

			public function AvaTaxGetTax($order_info, $products, $commit_status) {
				include_once(DIR_SYSTEM . 'AvaTax4PHP/AvaTax.php');

				global $registry;
				$this->cart = $registry->get('cart');

				$environment = 'Development';

				$service_url = $this->config->get('config_avatax_service_url');
				$account = $this->config->get('config_avatax_account');
				$license = $this->config->get('config_avatax_license_key');
				$client = $this->config->get('config_avatax_client');

				if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
					$environment = "Development";
				else
					$environment = "Production";

				new ATConfig($environment, array('url'=>$service_url, 'account'=>$account,'license'=>$license, 'client'=>$client, 'trace'=> TRUE));

				//Variable Mapping

				if($order_info->row["customer_id"]>0) {
					$CustomerCode = $order_info->row["customer_id"];
				}
				else {
					$CustomerCode = $order_info->row["customer_group_id"];
				}

				$country_details = $this->getCountry($this->config->get('config_country_id'));
				$zone_details = $this->getZone($this->config->get('config_zone_id'));

				$OrigAddress = $this->config->get('config_address');
				$OrigCity = $this->config->get('config_city');
				$OrigRegion = $zone_details["code"];
				$OrigPostalCode = $this->config->get('config_postal_code');
				$OrigCountry = $country_details["iso_code_2"];

				if(isset($this->request->request["shipping_address_1"]))
				{
					$dest_country_details =  $this->getCountry($this->request->request["shipping_country_id"]);
					$dest_zone_details = $this->getZone($this->request->request["shipping_zone_id"]);

					$DestAddress = $this->request->request["shipping_address_1"];
					$DestCity =$this->request->request["shipping_city"];
					$DestPostalCode = $this->request->request["shipping_postcode"];
					$DestRegion = $dest_zone_details["code"];
					$DestCountry = $dest_country_details["iso_code_2"];
				}
				else
				{
					if(isset($order_info->row["shipping_address_1"]) && $order_info->row["shipping_address_1"]!="")
					{
						$DestAddress = $order_info->row["shipping_address_1"];
						$DestCity = $order_info->row["shipping_city"];
						$DestPostalCode = $order_info->row["shipping_postcode"];
						$DestRegion = $order_info->row["shipping_zone"];
						$DestCountry = $order_info->row["shipping_country"];
					}
					else
					{
						if(isset($this->request->request["payment_address_1"]))
						{
							$dest_country_details =  $this->getCountry($this->request->request["payment_country_id"]);
							$dest_zone_details = $this->getZone($this->request->request["payment_zone_id"]);
							$DestAddress = $this->request->request["payment_address_1"];
							$DestCity =$this->request->request["payment_city"];
							$DestPostalCode = $this->request->request["payment_postcode"];
							$DestRegion = $dest_zone_details["code"];
							$DestCountry = $dest_country_details["iso_code_2"];
						}
						else
						{
							$DestAddress = $order_info->row["payment_address_1"];
							$DestCity = $order_info->row["payment_city"];
							$DestPostalCode = $order_info->row["payment_postcode"];
							$DestRegion = $order_info->row["payment_zone"];
							$DestCountry = $order_info->row["payment_country"];
						}
					}
				}

				$CompanyCode = $this->config->get('config_avatax_company_code');
				$DocType = $this->config->get('config_avatax_transaction_calculation');
				if($DocType == 1){
					$DocType = "SalesInvoice";
				}else{
					$DocType = "SalesOrder";
				}
				//$DocType = "Any";
				$DocCode = $order_info->row['order_id'];
				$SalesPersonCode = "";
				$EntityUseCode = "";
				$Discount = 0;
				$PurchaseOrderNo = '';
				$ExemptionNo = "";
				$LocationCode = '';
				$LineNo = 1;

				$client = new TaxServiceSoap($environment);
				$request = new GetTaxRequest();
				$dateTime = new DateTime();
				//$request->setDocDate($DocDate);
				$request->setCompanyCode($CompanyCode);
				$request->setDocType($DocType);
				$request->setDocCode($DocCode);
				$request->setDocDate(date_format($dateTime, "Y-m-d"));
				$request->setSalespersonCode($SalesPersonCode);
				$request->setCustomerCode($CustomerCode);
				$request->setCustomerUsageType($EntityUseCode);
				$request->setDiscount($Discount);
				$request->setPurchaseOrderNo($PurchaseOrderNo);
				$request->setExemptionNo($ExemptionNo);
				$request->setDetailLevel(DetailLevel::$Tax);
				$request->setLocationCode($LocationCode);
				//$request->setCommit(FALSE);
				if($commit_status == 0) $request->setCommit(FALSE);
				else $request->setCommit(TRUE);

				//Add Origin Address
				$origin = new Address();
				$origin->setAddressCode(0);
				$origin->setLine1($OrigAddress);
				$origin->setLine2("");
				$origin->setCity($OrigCity);
				$origin->setRegion($OrigRegion);
				$origin->setPostalCode($OrigPostalCode);
				$origin->setCountry($OrigCountry);
				$request->setOriginAddress($origin);

				// Add Destination Address
				$destination = new Address();
				$destination->setAddressCode(1);
				$destination->setLine1($DestAddress);
				$destination->setLine2("");
				$destination->setCity($DestCity);
				$destination->setRegion($DestRegion);
				$destination->setPostalCode($DestPostalCode);
				$destination->setCountry($DestCountry);
				$request->setDestinationAddress($destination);

				// Line level processing
				$Ref1 = '';
				$Ref2 = '';
				$ExemptionNo = '';
				$RevAcct = '';
				$EntityUseCode = '';

				$lines = array();
				$product_total = 0;
				$ordertotal = 0;
				$i = 0;
				$status = false;

				//Shipping Line Item
				// Order Totals
				$order_total_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_total` WHERE order_id = '" . (int)$order_info->row['order_id'] . "' ORDER BY sort_order ASC");

				$shipping_count = 0;

				//Added for discount/Coupon on 05/05/2015
				foreach ($order_total_query->rows as $order_total) {
					if($order_total['code']=="coupon") {
						$Discount = abs($order_total['value']);
						$coupon_code = $order_total['title'];
						$coupon_code = substr($coupon_code,8,-1);

						$coupon_id_res = $this->db->query("SELECT coupon_id FROM `" . DB_PREFIX . "coupon` WHERE code = '" . $coupon_code . "'");
						if($coupon_id_res->num_rows != 0){
							$coupon_id = $coupon_id_res->row['coupon_id'];
							$coupon_info_obj = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "coupon WHERE coupon_id = '" . (int)$coupon_id . "'");
							$coupon_info = $coupon_info_obj->row;

							$coupon_product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "coupon_product WHERE coupon_id = '" . (int)$coupon_id . "'");

							foreach ($coupon_product_query->rows as $result) {
								$coupon_product_data[] = $result['product_id'];
							}
						}
					}
				}

				foreach ($order_total_query->rows as $order_total) {
					if($order_total['code']=="shipping") {
						$code = $order_info->row['shipping_code'];
						$shipping_method = $this->config->get(substr($code,strpos($code, '.')+1,strlen($code)).'_tax_class_id');
						if(isset($shipping_method) && $shipping_method > 0)
						{
						   $TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $shipping_method . "'");
							if($TaxClasses->row['title'] == 'Non Taxable')
							{
								$TaxCode = 'NT';
							}
							else
							{
								$TaxCode = $TaxClasses->row['title'];
							}
						}
						else
						{
							//$TaxCode = 'FR';
							$TaxCode = '';
						}
						$line1 = new Line();
						$line1->setNo($i+1);
						$line1->setItemCode($order_total['code']);
						$line1->setDescription($order_total['title']);
						$line1->setTaxCode($TaxCode);
						$line1->setQty(1);

						//Added for coupon/discount on 05/05/2015
						//If Coupon is applied & free shipping is enabled, we'll pass 0 to free shipping
						$cost = $order_total['value'];
						//exit;
						if(isset($coupon_info) && !empty($coupon_info))
						{
							if($coupon_info['shipping'])
							{
								$Discount = $Discount - $cost;
								$cost = 0;
							}
						}

						$line1->setAmount($cost);

						//$line1->setAmount($order_total['value']);
						$line1->setDiscounted(false);
						$line1->setRevAcct($RevAcct);
						$line1->setRef1($Ref1);
						$line1->setRef2($Ref2);
						$line1->setExemptionNo($ExemptionNo);
						$line1->setCustomerUsageType($EntityUseCode);
						$line1->setOriginAddress($origin);
						$line1->setDestinationAddress($destination);

						$lines[$i] = $line1;
						$i++;
						$shipping_count++;
					}

					if($order_total['code']=="handling") {
						$hadling_total = $this->config->get('handling_total');
						$hadling_tax_class_id = $this->config->get('handling_tax_class_id');
						$hadling_fee = $this->config->get('handling_fee');

						//Added Handling Status in if condition by Vijay Nalawade on 13 Jan 2015. To check if Handling Fee status is enabled or not
						$handling_status = $this->config->get('handling_status');

						if(($ordertotal <= $hadling_total) && ($handling_status==1))
						{
							if($hadling_tax_class_id > 0){
								$TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $hadling_tax_class_id . "'");
								if($TaxClasses->row['title'] == 'Non Taxable')
								{
									$TaxCode = 'NT';
								}
								else
								{
									$TaxCode = $TaxClasses->row['title'];
								}
							}
							else{
								//$TaxCode = 'HNLD';
								$TaxCode = '';
							}
						}
						//$TaxCode = $product["tax_class_id"];
						$line1 = new Line();
						$line1->setNo($i+1);
						$line1->setItemCode($order_total['code']);
						$line1->setDescription($order_total['title']);
						//$line1->setTaxCode($TaxCode);
						$line1->setQty(1);
						$line1->setAmount($order_total['value']);
						$line1->setDiscounted(false);
						$line1->setRevAcct($RevAcct);
						$line1->setRef1($Ref1);
						$line1->setRef2($Ref2);
						$line1->setExemptionNo($ExemptionNo);
						$line1->setCustomerUsageType($EntityUseCode);
						$line1->setOriginAddress($origin);
						$line1->setDestinationAddress($destination);

						$lines[$i] = $line1;
						$i++;
					}
				}

				$avatax_discount_amount = 0;
				$TaxCode = 0;

				$lineCount = count($products);
				foreach ($products as $product) {
					//$product_original_amount = $this->getProductOriginalPrice($product["product_id"]);
					$Product_detail = $this->getProductOriginalPrice($product["product_id"]);
					//$product_original_amount = $Product_detail['product_price'];
					//$total_amount = ($product_original_amount * $product["quantity"]);
					$total_amount = $product["total"];
					$Description = $this->getCategories($product["product_id"]);
					if(isset($Product_detail['tax_class_title']) || $Product_detail['tax_class_title']!= null)
					{
						if($Product_detail["tax_class_title"] == 'Non Taxable')
						{
							$TaxCode = 'NT';
						}
						else
						{
							$TaxCode = $Product_detail["tax_class_title"];
						}
					}
					else
					{
						$TaxCode = '';
					}

					//Product Discount
					$this->load->model('catalog/product');
					//$product_discount = $this->model_catalog_product->getProductDiscounts($product["product_id"]);
					$product_discount = $this->model_catalog_product->getProductDiscountsForGivenRange($product["product_id"], $product["quantity"], $order_info->row["date_added"], $order_info->row["customer_group_id"]);

					$discount_count = 0;
					$discount_amount = 0;
					foreach($product_discount as $discount) {
						$discount_amount += $discount["price"];
						$discount_count++;
					}

					$line1 = new Line();
					//$line1->setNo($i+1);//$product["product_id"]
					$line1->setNo($product["product_id"]);

					//UPC Code Added by Vijay as on 3rd Dec 2014. If enabled, UPC code will be passed instead of Model number
					//Changed by Vijay on 26 Dec 2014. Added 50 Characters limitation for Model number & SKU, as CALC service doesn't accept more than 50 characters Item Code.
					if(($this->config->get('config_avatax_product_code')=='UPC') && trim($product["upc"])<>"")
					{
						$line1->setItemCode("UPC:".$product["upc"]);
					}
					elseif(($this->config->get('config_avatax_product_code')=='SKU') && trim($product["sku"])<>"")
					{
						$line1->setItemCode(substr($product["sku"],0,50));
					}
					else
					{
						$line1->setItemCode(substr($product["model"],0,50));
					}

					$line1->setDescription($Description);
					$line1->setTaxCode($TaxCode);
					$line1->setQty($product["quantity"]);
					//$line1->setAmount($product["price"]);
					//$line1->setAmount($product["total"]);
					$line1->setAmount($total_amount);

					//Added to handle coupon scenario regarding multiple products or order
					if(isset($coupon_id) && ($coupon_id<>""))
					{
						if (!isset($coupon_product_data))
						{
							$status = true;
						}
						else
						{
							if (in_array($product['product_id'], $coupon_product_data)) {
								$status = true;
							} else {
								$status = false;
							}
						}
					}

					$line1->setDiscounted($status);

					$line1->setRevAcct($RevAcct);
					$line1->setRef1($Ref1);
					$line1->setRef2($Ref2);
					$line1->setExemptionNo($ExemptionNo);
					$line1->setCustomerUsageType($EntityUseCode);
					$line1->setOriginAddress($origin);
					$line1->setDestinationAddress($destination);

					$lines[$i] = $line1;
					$i++;
					$ordertotal += $total_amount;
					$product_total += $product['quantity'];
				}

				//$request->setLines(array($lines));
				$request->setLines($lines);
				$request->setDiscount($Discount);

				$GetTaxData = array();
				$returnMessage = "";

				try {
					if (!empty($DestAddress))
					{
						$latency = round(microtime(true) * 1000);
						$getTaxResult = $client->getTax($request);
						$latency = round(microtime(true) * 1000)-$latency;
						$this->session->data['latency'] = "" ;
						$this->session->data['getTaxLines'] = "" ;
						$this->session->data['getDocType'] = "" ;
						$this->session->data['getDocCode'] = "" ;
						$this->session->data['latency'] = $latency ;
						$this->session->data['getTaxLines'] = $getTaxResult->getTaxLines() ;
						$this->session->data['getDocType'] = $getTaxResult->getDocType() ;
						$this->session->data['getDocCode'] = $getTaxResult->getDocCode();

						/************* Logging code snippet (optional) starts here *******************/
						// System Logger starts here:

						$log_mode = $this->config->get('config_avatax_log');

						if($log_mode==1)
						{
							$timeStamp 			= 	new DateTime();						// Create Time Stamp
							$params				=   '[Input: ' . ']';		// Create Param List
							$u_name				=	'';							// Eventually will come from $_SESSION[] object

							// Creating the System Logger Object
							$application_log 	= 	new SystemLogger;

							$application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastRequest());		// Create System Log
							$application_log->WriteSystemLogToFile();			// Log info goes to log file

							$application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastResponse());		// Create System Log
							$application_log->WriteSystemLogToFile();			// Log info goes to log file

							//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
							// 	System Logger ends here
							//	Logging code snippet (optional) ends here
						}
						// Error Trapping
						if ($getTaxResult->getResultCode() == SeverityLevel::$Success) {

							$GetTaxData['GetTaxDocCode'] = $getTaxResult->getDocCode();
							$GetTaxData['GetTaxDocDate'] = $getTaxResult->getDocDate();
							$GetTaxData['GetTaxTotalAmount'] = $getTaxResult->getTotalAmount();
							$GetTaxData['GetTaxTotalTax'] = $getTaxResult->getTotalTax();
							$this->session->data['previous_error_status'] = "Success";
							//return $getTaxResult->getTotalTax();

							return $GetTaxData;

						} else {
							$msg = $getTaxResult->getMessages();
							$returnMessage .= $msg[0]->getName() . ": " . $msg[0]->getSummary() . "\n";
							$this->session->data['previous_error_status'] = '<b>' ."AvaTax Error :" . '</b>' . $returnMessage;
							return $returnMessage;
						}
					}
				} catch (SoapFault $exception) {
					$msg = "Exception: ";
					if ($exception)
						$msg .= $exception->faultstring;

						// If you desire to retrieve SOAP IN / OUT XML
						//  - Follow directions below
						//  - if not, leave as is

						return $msg;
						//    }   //UN-comment this line to return SOAP XML
				}   //Comment this line to return SOAP XML
			}
			]]></add>
		</operation>
		<operation>
			<!--if AvaTax tax calculation is true then addOrderHistory function is called which fetches the order detail, changes the order status and update the changes-->
			<search position="replace" offset='3'><![CDATA[$this->event->trigger('pre.order.delete', $order_id);]]></search>
			<add><![CDATA[
				$this->event->trigger('pre.order.delete', $order_id);
				if($this->config->get('config_avatax_tax_calculation'))
				{
					//$order_query_delete = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order` WHERE order_status_id > '0' AND order_id = '" . (int)$order_id . "'");
					$this->addOrderHistory($order_id, 7);
				}
				else
				{
					$this->addOrderHistory($order_id, 0);
				}
			]]></add>
		</operation>

		<operation>
			<!--if AvaTax tax calculation is true then addOrderHistory function is called which fetches the order detail, changes the order status and update the changes at the time of edit order-->
			<search position="replace" offset='3'><![CDATA[$this->event->trigger('pre.order.edit', $data);]]></search>
			<add><![CDATA[
				$this->event->trigger('pre.order.edit', $data);
				if($this->config->get('config_avatax_tax_calculation'))
				{
					// Void the order first
					// $this->addOrderHistory($order_id, 0);
				}
				else
				{
					$this->addOrderHistory($order_id, 0);
				}
			]]></add>
		</operation>
		<operation>
			<!--AvaTaxCancelTax function is defined which serves as the wrapper function for AvaTax CancelTax-->
			<search position="before" ><![CDATA[public function getOrder($order_id) {]]></search>
			<add><![CDATA[

			/****************************************************************************
			*   Last Updated On		:	05/14/2015			                           	*
			*   Description			:  	This function serves as the wrapper function	*
			*   						for AvaTax CancelTax() Call						*
			****************************************************************************/

			public function AvaTaxCancelTax($AvaTaxDocumentCode, $CancelCode) {

				$environment = 'Development';
				if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
					$environment = "Development";
				else
					$environment = "Production";

				$order_data = array();
				$dateTime = new DateTime();
				$order_data["service_url"] = $this->config->get('config_avatax_service_url');
				$order_data["account"] = $this->config->get('config_avatax_account');
				$order_data["license"] = $this->config->get('config_avatax_license_key');
				$order_data["client"] = $this->config->get('config_avatax_client');
				$order_data["environment"] = $environment;
				$order_data["CompanyCode"] = $this->config->get('config_avatax_company_code');
				$order_data["DocType"] = "SalesInvoice";
				//$order_data["DocCode"] = $OrderInformation->row['avatax_paytax_document_code'];
				$order_data["DocCode"] = $AvaTaxDocumentCode;
				//$order_data["CancelCode"] = "DocDeleted";
				$order_data["CancelCode"] = $CancelCode;

				include_once(DIR_SYSTEM . 'AvaTax4PHP/cancel_tax.php');
				$return_message = CancelTax($order_data);

				return $return_message;
			}
			]]></add>
		</operation>
	</file>
	